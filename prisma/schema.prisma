// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id          String       @id @default(cuid())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  name        String
  description String?
  price       Float
  category    Category
  image       String?
  stock       Int          @default(0)
  isAvailable Boolean      @default(true)
  
  // Traductions des noms et descriptions (JSON)
  translations Json?       // { "fr": { "name": "Coca", "description": "..." }, "en": { ... } }
  
  // Relations
  orderItems  OrderItem[]

  @@index([category])
}

enum Category {
  DRINK
  DESSERT
}

model Order {
  id                 String       @id @default(cuid())
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  number             String       @unique // Numéro de commande lisible (ex: 20250307-001)
  customerName       String
  paymentMethod      PaymentMethod
  totalAmount        Float
  status             OrderStatus  @default(NEW)
  isPaid             Boolean      @default(false)
  
  // Relations
  items              OrderItem[]
  statusHistory      StatusHistory[]

  @@index([status])
  @@index([isPaid])
  @@index([createdAt])
}

enum PaymentMethod {
  CASH
  CARD
  PAYPAL
}

enum OrderStatus {
  NEW          // Nouvelle commande
  PREPARING    // En préparation
  READY        // Prête à être servie
  COMPLETED    // Terminée et servie
  CANCELLED    // Annulée
}

model OrderItem {
  id        String   @id @default(cuid())
  quantity  Int      @default(1)
  unitPrice Float
  
  // Pour garder une copie des données produit au moment de la commande
  productSnapshot Json
  
  // Relations
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String
  product   Product  @relation(fields: [productId], references: [id])
  productId String

  @@index([orderId])
  @@index([productId])
}

model StatusHistory {
  id        String      @id @default(cuid())
  status    OrderStatus
  timestamp DateTime    @default(now())
  note      String?
  
  // Relations
  order     Order       @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String

  @@index([orderId])
  @@index([timestamp])
}

model Settings {
  id        String     @id @default(cuid())
  key       String     @unique
  value     String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}